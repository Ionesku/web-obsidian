version: '3.8'

# Production Docker Compose Configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  backend:
    environment:
      - SECRET_KEY=${SECRET_KEY}  # Must be set in environment
      - DATABASE_URL=sqlite:///data/app.db
      - VAULTS_ROOT=/data/vaults
      - INDEXES_ROOT=/data/indexes
      - CORS_ORIGINS=${CORS_ORIGINS}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production backup service with more frequent backups
  backup:
    environment:
      - BACKUP_INTERVAL=21600  # 6 hours
      - BACKUP_RETENTION_DAYS=90
    command: >
      sh -c '
        while true; do
          echo "Creating backup at $$(date)"
          tar -czf /backups/vault-backup-$$(date +%Y%m%d-%H%M%S).tar.gz -C /data .
          echo "Cleaning old backups (keeping last $${BACKUP_RETENTION_DAYS:-30} days)"
          find /backups -name "vault-backup-*.tar.gz" -mtime +$${BACKUP_RETENTION_DAYS:-30} -delete
          echo "Next backup in $${BACKUP_INTERVAL:-21600} seconds"
          sleep $${BACKUP_INTERVAL:-21600}
        done
      '

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: obsidian-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: obsidian-grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:

